# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TestPlugin
                                 A QGIS plugin
 QGIS3.0 Test Plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-02-26
        git sha              : $Format:%H$
        copyright            : (C) 2018 by ozo360
        email                : ozo360@example.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from qgis.gui import QgsMapTool
from qgis.core import *
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .test_plugin_dialog import TestPluginDialog
import os.path
import math

class TestPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TestPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = TestPluginDialog(self.iface.mainWindow())
        self.first_flg = True

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Test Plugin')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'TestPlugin')
        self.toolbar.setObjectName(u'TestPlugin')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TestPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/test_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'TestPlugin'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Test Plugin'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        self.dlgUpdate()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def dlgUpdate(self):
        if self.first_flg:
            self.dlg.btn1.clicked.connect(self.buttonClicked)
            self.dlg.cmb.activated.connect(self.comboActivated)
            self.dlg.btnAdd.clicked.connect(self.btnAddClicked)
            self.dlg.btnMove.clicked.connect(self.btnMoveClicked)
            self.dlg.btnDel.clicked.connect(self.btnDelClicked)
            self.dlg.btnCanvasEvent.toggled.connect(self.btnCanvasEventToggled)
            self.first_flg = False

        self.setCmb()

    def buttonClicked(self):
        act_layer = self.iface.activeLayer()
        if act_layer is not None and act_layer.type() == QgsMapLayer.VectorLayer:
            cnt = act_layer.featureCount()
            QMessageBox.information(self.dlg, 
                                    'count', str(cnt))

    def setCmb(self):
        self.dlg.cmb.clear()
        layermap = QgsProject.instance().mapLayers()
        self.dlg.cmb.addItem('')
        for key, layer in layermap.items():
            if layer.type() == QgsMapLayer.VectorLayer:
                self.dlg.cmb.addItem(layer.name(), key)

    def comboActivated(self, index):
        if index > 0:
            layer_id = self.dlg.cmb.itemData(index)
            layer = QgsProject.instance().mapLayer(layer_id)

            if layer is not None and layer.type() == QgsMapLayer.VectorLayer:
                cnt = layer.featureCount()
                QMessageBox.information(self.dlg, 
                                        'count', str(cnt))
    def btnAddClicked(self):
        act_layer = self.iface.activeLayer()
        if act_layer is None \
                or act_layer.type() != QgsMapLayer.VectorLayer\
                or act_layer.geometryType() != QgsWkbTypes.PointGeometry:
            QMessageBox.warning(self.dlg,
                                    'error', u'ポイントレイヤを選択してください')
            return

        # 適宜入力チェックをかけましょう
        lon = float(self.dlg.lineEditLon.text())
        lat = float(self.dlg.lineEditLat.text())

        pointxy = QgsPointXY(lon, lat)
        geom = QgsGeometry.fromPointXY(pointxy)

        fields = act_layer.fields()
        feature = QgsFeature(fields)
        feature.setGeometry(geom)
        # 属性を変更するなら
        # feature['id'] = 6
        # feature['name'] = 'tokyo'

        act_layer.startEditing()
        act_layer.addFeature(feature)
        act_layer.commitChanges()

    def btnMoveClicked(self):
        act_layer = self.iface.activeLayer()
        if act_layer is None \
                or act_layer.type() != QgsMapLayer.VectorLayer\
                or act_layer.geometryType() != QgsWkbTypes.PointGeometry:
            QMessageBox.warning(self.dlg,
                                    'error', u'ポイントレイヤを選択してください')
            return

        features = act_layer.selectedFeatures()
        act_layer.startEditing()
        for feature in features:
            fid = feature.id()
            geom = feature.geometry()
            pointxy = geom.asPoint()
            x = pointxy.x()
            y = pointxy.y()
            pointxy.setX(x + 0.001)
            pointxy.setY(y - 0.001)
            new_geom = QgsGeometry.fromPointXY(pointxy)
            act_layer.changeGeometry(fid, new_geom)
        act_layer.commitChanges()

    def btnDelClicked(self):
        act_layer = self.iface.activeLayer()
        if act_layer is None \
                or act_layer.type() != QgsMapLayer.VectorLayer\
                or act_layer.geometryType() != QgsWkbTypes.PointGeometry:
            QMessageBox.warning(self.dlg,
                                    'error', u'ポイントレイヤを選択してください')
            return

        act_layer.startEditing()
        act_layer.deleteSelectedFeatures()
        act_layer.commitChanges()

    def btnCanvasEventToggled(self, checked):
        if checked:
            self.dlg.btnCanvasEvent.setText('ON')
            self.previous_map_tool = self.iface.mapCanvas().mapTool()
            # cce = CatchCanvasEvent(self.iface)
            # cce.setCanvasPressEvent(self.CanvasPress)
            cce = CustomMapTool(self.iface, self.CanvasPress)
            self.iface.mapCanvas().setMapTool(cce)

        else:
            self.dlg.btnCanvasEvent.setText('OFF')
            self.iface.mapCanvas().setMapTool(self.previous_map_tool)

    def CanvasPress(self, event):
        act_layer = self.iface.activeLayer()
        if act_layer is None \
                or act_layer.type() != QgsMapLayer.VectorLayer\
                or act_layer.geometryType() != QgsWkbTypes.PointGeometry:
            return

        pt = event.mapPoint()
        buffer = 0.001
        rect = QgsRectangle(pt.x() - buffer,
                            pt.y() - buffer,
                            pt.x() + buffer,
                            pt.y() + buffer)

        # behavior=SetSelection
        act_layer.selectByRect(rect)
        feat_list = act_layer.selectedFeatures()
        min = None
        fid = -1
        for feat in feat_list:
            geom = feat.geometry()
            pointxy = geom.asPoint()
            d = math.sqrt((pointxy.x() - pt.x()) ** 2 + (pointxy.y() - pt.y()) ** 2)

            if min is None or d < min:
                min = d
                fid = feat.id()
                id = feat['id']
                name = feat['name']

        # 選択をクリア
        act_layer.removeSelection()

        if fid > -1:
            act_layer.select(fid)
            # 属性をセット
            self.dlg.lineEditId.setText(str(id))
            self.dlg.lineEditName.setText(name)

class CustomMapTool(QgsMapTool):
    def __init__(self, iface, callback):
        QgsMapTool.__init__(self, iface.mapCanvas())
        self.callback = callback

    def canvasPressEvent(self, event):
        self.callback(event)